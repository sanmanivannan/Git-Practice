git init
=========
1. git init command is used when a project is started freshly and wanted to be created in the git project
 NOTE: If any project is Cloned or Downloaded from the GITHUB/GITLAB, then the "git init" command may not be used as its already initialized

2. when "git init: command is executed initially during a normal project turning to the git project; a hidded file called .git file is created and placed on the git file

what is inside the .git file and why its important:
-----------------------------------------------------
The . git folder contains all the information that is necessary for your project in version control and all the information about commits, remote repository address, etc. 
All of them are present in this folder. It also contains a log that stores your commit history so that you can roll back to history.

git config
===========
this is used to configure the user who is using the git on that PC who is going to work on the git projects

git config --global user.name "username"
git config --global user.email "useremail"


git Clone
===========

git clone <HTTPS/SSH>

git add
=========



git commit
============


git status
===========


git login
===========


git and github SSH connection setup
====================================
git(local) and the github(remote repo) should always be connected to the seemless connectivity to make the transaction between those 2
For which we need to setup the SSH connectivity between those 2, else eveytime when we try to push/pull data between those 2, we should provide the username and password
Just to avoid those manual process, we need to setup the SSH  connectivity 
NOTE: Do only the SSH setup in your PC or Trusted systems(DONT setup on the PUBLIC PCs)

ssh-keygen


.gitignore
==========
.gitignore is the the hidden file within the GIT repository(which we need to manually create)
Is use to have the librarys, dependencies and other unwanted file which doesnt need need to be git commited
All the files inside the .gitignore file would be omited/ignored while the commits are done

git revert
===========
revert is safer than reset, as revert can go back to any stage.
git log
git revert <change#>


git reset (is very dangerous command, it will reset to any previous stage. all the new changes will be deleted)
==================================================================================================================
git reset is used to remove the files from the staging already

git log
git reset <filename>

when only "git reset" command is provided everything on the staging will be removed


git log
=========
git-diff - Show changes between commits, commit and working tree, etc

Basically, it would display the differences of changes on the staging area and the .git directory/repository


git remote
===========
git remote command is used to add/link the git remote repository to the locak repository
eg:
git remote add origin <GIT HUB URL>

you can also add multiple remote origins, like
git remote add origin1 <git hib url>

Once the git remote is linked, next is the PULL and PUSH data from/to the remote repository

GIT PULL (fetch + merge)
============
git pull origin <master/branch name>

Note: THis will work only after adding the the remote repo to our local, as mentioned on the above"git remote" section


GIT PUSH
==========
git push origin <master/ branchname>


GIT MERGE (HEAD/local repo/commitstage to workingspace)
========================================================
This command is used to merge the brances to each other, for example if you could like to merge a branch to the master branch
First, go the master branch by using the command - git checkout master
After which, git merge <branchname> master (this command will merge <branchname> to the master branch)

Similarly, if you like tto merge branch 2 to branch 1. Go to branch 1 by using the checkout command
and then use $git merge branch2(source) branch1(destination)


GIT fetch(fetching the data from remote repo to the localcommitstate/local repo)
==========


git squash
==============
While merging the branhces and if we dont want to see any commits on the merged branch we can use squash option

for example, when we want to merge <branch1> to master and dont want to see the commits commied on the <branch1>, use squash command

git checkout master
git merge <branch1> --squash
git commit -m "branch1 merged with master>


git rebase (inverse of merge)
============
instead of mergeing the <branch1> to  master branch, using the rebase

git checkout <branch1>
git rebase master

NOTE: please use rebase only on the localrepo, SHOULDNT be uase on the public repos.


git stash
==============
when we want to switch from 1 branch to another branch, whil we are middle of something on the previouls and wanted to safely save the changes, we use stash command
git add .
git stash(this will safely save the changes in the staging area, eventhough we havent commited it)

git checkout master (complete all work on the master branch)

Then checkout to the <feature1> branch and comtinue the work which was left previously
git checkout <feature1>
git stash apply
and not resume your work where ever you have left :-)

Resolving the merge conflicts:
======================================
1. Conflicts occurs when 2 or more persons make changes on a file
2. Assume that your co-worked made some changes on a file and pushed the code to the remote repo(github-origin master)
3. And on local repo you are making some chamnges on the same file and commiting the changes
4. before pushing the code to the remote repo, its always a good suggestion to fectch the code from remote and compare it with the local changes

git fetch origin master (which bascically brings the code from origin master to the local HEAD)

git status
(whcih will output saying that, "your branch and the 'origin master' changes have diverged and have 1 /2 difference commits")
Once discussing with the co-worker and the conflicts have been solved
git merge origin master
git status


git cherry-pick
====================
cherry-pick is picking a specific COMMIT from a person or machine. And adding a commit in our master or branch which we are working

Assuming that we gave added <user2> repo as one of our remote apart from ours(which is generally "origin")
$git remote
origin 
user2

$git fetch user2
$git log user2/master(any branchname)

$git cherry-pick <sha-1 of user2 repo>
which will, cherry-pick only that <sha-1> commit of <user2> and merge that as our lastest commit(basicially, used to pick any hotfixes in the project)


git amend
===============
Amend is used to amend something without making any commits, just by using the last commit made
git status
git add <file1> <file2>
git commit --no-edit



git flow
=============

git flow init

git flow feature start feature-1

git flow feature finish feature-1

git flow feature publich feature-1


master
Develop
feature
hotfix
Release






































